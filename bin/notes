#!/bin/bash

# Default directory to scan (change to your default directory if needed).
NOTES_DIR="$HOME/Documents/.notes"
TEXT_FORMAT="txt"
EDITOR="${EDITOR:-nano}"
BAT_THEME="OneHalfLight"

# Only applies to open and delete 
REVERSE=true
# 'W' for creation date, 'Y' for modified date (default is W)
SORT_FORMAT=W

PREVIEW_SIZE=70%
# Recommend 5 for start_line so user can see the highlighted line quickly in the search preview
START_LINE_SEARCH_PREVIEW=5
END_LINE_SEARCH_PREVIEW=9999

get_current_date_time() {
	echo $(date +"%d-%m-%Y-%H-%M-%S")
}

# Creates NOTES_DIR if it does not exist.
[ ! -d "$NOTES_DIR" ] && mkdir -p "$NOTES_DIR"

trap "exit" SIGINT SIGTERM

show_menu() {
	ACTIONS=("New" "Open" "Search" "Delete" "Quit")
	while true; do
		SELECTED_ACTION=$(printf "%s\n" "${ACTIONS[@]}" | fzf --border --layout=reverse --prompt="Choose an action: ")
		if [[ $? != 0 ]]; then
			break
		fi
		case $SELECTED_ACTION in
			"New")
				create_new_note
				;;
			"Open")
				open_note
				;;
			"Search")
				search_notes
				;;
			"Delete")
				delete_notes
				;;
			"Quit")
				break
				;;
			*)
				echo "Invalid action"
				;;
		esac
	done
}

list_order() {
  if [ ! "$REVERSE" = true ]; then
    echo "--tac"
  else
    echo ""
  fi
}

create_new_note(){
	${EDITOR} "$NOTES_DIR/$(get_current_date_time).$TEXT_FORMAT"
}

open_note(){
	NOTE=$(find "$NOTES_DIR" -type f -name "*.$TEXT_FORMAT" -exec stat --format="%$SORT_FORMAT %n" {} \; | sort -n | cut -d ' ' -f2- | xargs -I {} basename {} | fzf --border \
	--layout=reverse $(list_order) \
	--ignore-case --prompt="Open: " \
	--preview-window=down:$PREVIEW_SIZE:noinfo:wrap --preview="bat --color=always --theme=$BAT_THEME --style=plain $NOTES_DIR/{}")

	if [[ -n "$NOTE" ]]; then
		${EDITOR} "$NOTES_DIR/$NOTE"
	fi
}

delete_notes(){
	NOTES=$(find "$NOTES_DIR" -type f -name "*.$TEXT_FORMAT" -exec stat --format="%$SORT_FORMAT %n" {} \; | sort -n | cut -d ' ' -f2- | xargs -I {} basename {} | fzf --border \
	--layout=reverse $(list_order) \
	--multi --ignore-case --prompt="Delete: " \
	--preview-window=down:$PREVIEW_SIZE:noinfo:wrap --preview="bat --color=always --theme=$BAT_THEME --style=plain $NOTES_DIR/{}")

	if [[ -n "$NOTES" ]]; then
		CONFIRMATION=$(printf "%s\n" "$NOTES" | while read -r file; do stat --format="%$SORT_FORMAT %n" "$NOTES_DIR/$file"; done | sort -n | cut -d ' ' -f2- | xargs -I {} basename {} | \
		fzf --print-query --border \
		--layout=reverse $(list_order) \
		--disabled --prompt="Type 'yes' to confirm: " \
		--preview-window=down:$PREVIEW_SIZE:noinfo:wrap --preview="bat --color=always --theme=$BAT_THEME --style=plain $NOTES_DIR/{}" | head -n 1)

		if [[ "$CONFIRMATION" =~ ^[Yy][Ee][Ss]$ ]]; then
			for NOTE in $NOTES; do
				rm "$NOTES_DIR/$NOTE"
			done
		fi
	fi
}

search_notes(){
	SELECTED=$(echo "Enter your query to begin searching" | fzf --bind 'change:reload(
		if [[ -z {q} ]]; then
			echo "Enter your query to begin searching"
		else
			RESULTS=$(grep -rni --include="*."'$TEXT_FORMAT' {q} '$NOTES_DIR' 2> /dev/null)
			[ -n "$RESULTS" ] && echo "Found $(echo "$RESULTS" | wc -l) results" || { echo "Found 0 results"; exit; }
			echo "$RESULTS" |
			while IFS=: read -r FILE_NAME LINE CONTENT; do
				CLEANED_CONTENT=$(echo "$CONTENT" | sed "s/://g")
				echo "$CLEANED_CONTENT:$LINE:$(basename "$FILE_NAME")"
			done
		fi)' \
	--border --layout=reverse --no-info --preview-window=down:$PREVIEW_SIZE:noinfo:wrap --ignore-case --header-lines=1 --prompt="Search: " \
	--preview 'IFS=":" read -r CONTENT LINE FILE_NAME <<< {}
		[[ -z {q} ]] && exit
		if ! [[ -z {} ]]; then
			MAX_LINES=$(wc -l < '$NOTES_DIR'/$FILE_NAME)
			START_LINE=$(($LINE > '$START_LINE_SEARCH_PREVIEW' ? $LINE - '$START_LINE_SEARCH_PREVIEW' : 1))
			END_LINE=$(($LINE + 5 < '$END_LINE_SEARCH_PREVIEW' ? $LINE + '$END_LINE_SEARCH_PREVIEW' : MAX_LINES));
			echo -e "\e[1m$FILE_NAME\e[0m"
			echo
			bat --color=always --theme='$BAT_THEME' --style=plain --paging=always --highlight-line=$LINE --line-range $START_LINE:$END_LINE '$NOTES_DIR'/$FILE_NAME
		fi')
        
	if [[ -n "$SELECTED" ]]; then
		IFS=":" read -r CONTENT LINE FILE_NAME <<< $SELECTED
		${EDITOR} +$LINE "$NOTES_DIR/$FILE_NAME"
	fi
}

show_menu
